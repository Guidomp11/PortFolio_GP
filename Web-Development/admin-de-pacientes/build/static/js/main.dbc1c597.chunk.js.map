{"version":3,"sources":["components/Formulario.jsx","components/Cita.jsx","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","evento","target","name","value","className","onSubmit","preventDefault","trim","alert","id","shortid","generate","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","citaID","citasActualizadas","filter","elemento","tieneCitas","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dbc1c597.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react';\r\nimport shortid from 'shortid';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Formulario = ({crearCita}) => {\r\n\r\n    //Crear state de citas\r\n    const [cita, actualizarCita] = useState({\r\n        mascota: '',\r\n        propietario: '',\r\n        fecha: '',\r\n        hora: '',\r\n        sintomas: ''\r\n    });\r\n    //Crear state de error\r\n    const [error, actualizarError] = useState(false);\r\n\r\n    //Funcion que se ejecuta cuando el usuario escribe en un input\r\n    const actualizarState = evento => {\r\n        actualizarCita({\r\n            ...cita,\r\n            [evento.target.name] : evento.target.value\r\n        });\r\n    }\r\n\r\n    //Extraer los valores\r\n    const {mascota, propietario, fecha, hora, sintomas} = cita;\r\n\r\n    //Enviar formulario\r\n    const submitCita = evento => {\r\n        evento.preventDefault();\r\n\r\n        //validar\r\n        //trim elimina espacios en blanco\r\n        if(mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === ''){\r\n            actualizarError(true);\r\n            alert('Debes completar todos los campos');\r\n            return;\r\n        }else{\r\n            actualizarError(false);\r\n        }\r\n\r\n        //asignar ID\r\n        cita.id = shortid.generate();\r\n        \r\n        //crear cita\r\n        crearCita(cita);\r\n\r\n        //reiniciar form\r\n        actualizarCita({\r\n            mascota: '',\r\n            propietario: '',\r\n            fecha: '',\r\n            hora: '',\r\n            sintomas: ''\r\n        });\r\n    }\r\n\r\n    return ( \r\n        <Fragment>\r\n            <h2>Crear Cita</h2>\r\n\r\n            {error ? <p className=\"alerta-error\">Todos los campos son obligatorios</p> : null}\r\n\r\n            <form\r\n                onSubmit={submitCita}\r\n            >\r\n                <label>Nombre Mascota</label>\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"mascota\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre mascota\"\r\n                    onChange={actualizarState}\r\n                    value={mascota}//va a permitir que se reinicie el campo al poner en '' el atributo\r\n                />\r\n\r\n                <label>Nombre del dueño</label>\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"propietario\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre del dueño\"\r\n                    onChange={actualizarState}\r\n                    value={propietario}\r\n                />\r\n\r\n                <label>Fecha</label>\r\n                <input \r\n                    type=\"date\"\r\n                    name=\"fecha\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState}\r\n                    value={fecha}\r\n                />\r\n\r\n                <label>Hora</label>\r\n                <input \r\n                    type=\"time\"\r\n                    name=\"hora\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState}\r\n                    value={hora}\r\n                />\r\n\r\n                <label>Síntomas</label>\r\n                <textarea\r\n                    name=\"sintomas\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState}\r\n                    value={sintomas}\r\n                ></textarea>\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"u-full-width button-primary\"\r\n                >Agregar Cita</button>\r\n\r\n            </form>\r\n        </Fragment>\r\n    );\r\n}\r\n \r\n\r\nFormulario.propTypes = {\r\n    crearCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Cita = ({cita, eliminarCita}) => (\r\n    <div className=\"cita\">\r\n        <p>Mascota: <span>{cita.mascota}</span></p>\r\n        <p>Dueño: <span>{cita.propietario}</span></p>\r\n        <p>Fecha: <span>{cita.fecha}</span></p>\r\n        <p>Hora: <span>{cita.hora}</span></p>\r\n        <p>Síntomas: <span>{cita.sintomas}</span></p>\r\n\r\n        <button\r\n            className=\"button eliminar u-full-width\"\r\n            onClick={ () => eliminarCita(cita.id) }\r\n        >Eliminar</button>\r\n    </div>\r\n);\r\n \r\nCita.propTypes = {\r\n    cita: PropTypes.object.isRequired,\r\n    eliminarCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Cita;","import React, {Fragment, useState, useEffect} from 'react';\nimport Formulario from './components/Formulario';\nimport Cita from './components/Cita';\n\n\nfunction App() {\n\n  //Citas en local storage\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n  if(!citasIniciales){\n    citasIniciales = [];\n  }\n\n  //Array de citas\n  const [citas, guardarCitas] = useState(citasIniciales);\n\n  //Use effect para realizar operaciones cuando el state cambia\n  useEffect( () => {\n    if(citasIniciales){\n      localStorage.setItem('citas', JSON.stringify(citas));\n    }else{\n      localStorage.setItem('citas', JSON.stringify([]));\n    }\n  }, [citas, citasIniciales] )\n\n  //funcion que agregue nuevas citas\n  const crearCita = cita => {\n    guardarCitas([\n      ...citas,\n      cita\n    ])\n  }\n\n  //funcion que elimina una cita\n  const eliminarCita = citaID => {\n    const citasActualizadas = citas.filter(elemento => (elemento.id !== citaID) );\n    guardarCitas(citasActualizadas);\n  }\n\n  //Mensaje condicional\n  const tieneCitas = citas.length === 0 ? 'No hay citas' : 'Administra tus citas' ;\n\n  return (\n    <Fragment>\n      <h1>Administrador de pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario \n              crearCita={crearCita}\n            />\n          </div>\n          <div className=\"one-half column\">\n                <h2>{tieneCitas}</h2>\n                {citas.map(cita => (\n                  <Cita \n                    key={cita.id}\n                    cita={cita}\n                    eliminarCita={eliminarCita}\n                  />\n                ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}